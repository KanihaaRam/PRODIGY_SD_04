SUDOKU SOLVER:
#include <stdio.h>
#include <stdbool.h>

#define SIZE 9

void printGrid(int grid[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
       for (int col = 0; col < SIZE; col++) {
           printf("%d ", grid[row][col]);
        }
        printf("\n");
  }
    
}
bool isValid(int grid[SIZE][SIZE], int row, int col, int num) {
    for (int i = 0; i < SIZE; i++) {
        if (grid[row][i] == num) {
            return false;
        }
    }

    for (int i = 0; i < SIZE; i++) {
        if (grid[i][col] == num) {
            return false;
        }
    }

 
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = startRow; i < startRow + 3; i++) {
        for (int j = startCol; j < startCol + 3; j++) {
            if (grid[i][j] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solveSudoku(int grid[SIZE][SIZE]) {
    int row, col;
    bool emptyCellFound = false;

    for (row = 0; row < SIZE; row++) {
        for (col = 0; col < SIZE; col++) {
            if (grid[row][col] == 0) {
                emptyCellFound = true;
                break;
            }
        }
        if (emptyCellFound) {
            break;
        }
    }

    if (!emptyCellFound) {
        return true;
    }

    
    for (int num = 1; num <= 9; num++) {
        if (isValid(grid, row, col, num)) {
            grid[row][col] = num;

            if (solveSudoku(grid)) {
                return true;
            }

            grid[row][col] = 0;
        }
    }

    return false;
}

void inputGrid(int grid[SIZE][SIZE]) {
    printf("Enter the Sudoku puzzle (use 0 for empty cells):\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &grid[i][j]);
        }
    }
}

int main() {
    int grid[SIZE][SIZE];

    inputGrid(grid);

    if (solveSudoku(grid)) {
        printf("Sudoku puzzle solved:\n");
        printGrid(grid);
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}
